#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

typedef pair<int, int> int2;

const int N = 3e5+10;

int n, m;

int arr[N], sum[N];

vector<int> alls;
vector<int2> adds, query;

int discretize_find(int x){
    
    int l = 0, r = alls.size() - 1;
    while(l < r){
        int mid = l + r >> 1;
        if(alls[mid] >= x) r = mid;
        else l = mid + 1;
    }
    return r + 1;
}

int main(){
    cin >> n >> m;
    for(int i = 0; i < n; i++){
        int x, c;
        cin >> x >> c;
        adds.push_back({x, c});
        alls.push_back(x);
    }
    
    for(int i = 0; i < m; i++){
        int l, r;
        cin >> l >> r;
        query.push_back({l, r});
        alls.push_back(l);
        alls.push_back(r);
    }
    
    sort(alls.begin(), alls.end());
    alls.erase(unique(alls.begin(),alls.end()), alls.end());
    
    for(auto item: adds){
        int x = discretize_find(item.first);
        arr[x] += item.second;
    }
    
    for(int i = 1; i <= alls.size(); i++) sum[i] = sum[i - 1] + arr[i];
    
    for(auto item: query){
        int r = discretize_find(item.second), l = discretize_find(item.first);
        cout << sum[r] - sum[l - 1] << endl;
    }
}
